/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: Seat.idl
  Source: /home/an/workspace/dds/dds-samples/data-types-cyclonedds/buildandroid/seat_msgs/msg/Seat.hpp
  Cyclone DDS: v0.10.0

*****************************************************************/
#ifndef DDSCXX__HOME_AN_WORKSPACE_DDS_DDS_SAMPLES_DATA_TYPES_CYCLONEDDS_BUILDANDROID_SEAT_MSGS_MSG_SEAT_HPP
#define DDSCXX__HOME_AN_WORKSPACE_DDS_DDS_SAMPLES_DATA_TYPES_CYCLONEDDS_BUILDANDROID_SEAT_MSGS_MSG_SEAT_HPP

#include <cstdint>
#include <string>

namespace seat_msgs
{
namespace msg
{
const std::string TOPIC_SEAT_POSITION = "seat_msgs/msg/Position";

const std::string TOPIC_SEAT_HEAT = "seat_msgs/msg/Heat";

const std::string TOPIC_SEAT_VENTILATE = "seat_msgs/msg/Ventilate";

const std::string TOPIC_SEAT_OCCUPANCY = "seat_msgs/msg/Occupancy";

class SeatMotorIdent_T
{
private:
 int32_t zone_ = 0;
 int32_t axle_ = 0;

public:
  SeatMotorIdent_T() = default;

  explicit SeatMotorIdent_T(
    int32_t zone,
    int32_t axle) :
    zone_(zone),
    axle_(axle) { }

  int32_t zone() const { return this->zone_; }
  int32_t& zone() { return this->zone_; }
  void zone(int32_t _val_) { this->zone_ = _val_; }
  int32_t axle() const { return this->axle_; }
  int32_t& axle() { return this->axle_; }
  void axle(int32_t _val_) { this->axle_ = _val_; }

  bool operator==(const SeatMotorIdent_T& _other) const
  {
    (void) _other;
    return zone_ == _other.zone_ &&
      axle_ == _other.axle_;
  }

  bool operator!=(const SeatMotorIdent_T& _other) const
  {
    return !(*this == _other);
  }

};

typedef ::seat_msgs::msg::SeatMotorIdent_T SeatMotorIdent;

class Position
{
private:
 ::seat_msgs::msg::SeatMotorIdent id_;
 int32_t angle_ = 0;

public:
  Position() = default;

  explicit Position(
    const ::seat_msgs::msg::SeatMotorIdent& id,
    int32_t angle) :
    id_(id),
    angle_(angle) { }

  const ::seat_msgs::msg::SeatMotorIdent& id() const { return this->id_; }
  ::seat_msgs::msg::SeatMotorIdent& id() { return this->id_; }
  void id(const ::seat_msgs::msg::SeatMotorIdent& _val_) { this->id_ = _val_; }
  void id(::seat_msgs::msg::SeatMotorIdent&& _val_) { this->id_ = _val_; }
  int32_t angle() const { return this->angle_; }
  int32_t& angle() { return this->angle_; }
  void angle(int32_t _val_) { this->angle_ = _val_; }

  bool operator==(const Position& _other) const
  {
    (void) _other;
    return id_ == _other.id_ &&
      angle_ == _other.angle_;
  }

  bool operator!=(const Position& _other) const
  {
    return !(*this == _other);
  }

};

class Heat
{
private:
 int16_t level_ = 0;
 int32_t zone_ = 0;

public:
  Heat() = default;

  explicit Heat(
    int16_t level,
    int32_t zone) :
    level_(level),
    zone_(zone) { }

  int16_t level() const { return this->level_; }
  int16_t& level() { return this->level_; }
  void level(int16_t _val_) { this->level_ = _val_; }
  int32_t zone() const { return this->zone_; }
  int32_t& zone() { return this->zone_; }
  void zone(int32_t _val_) { this->zone_ = _val_; }

  bool operator==(const Heat& _other) const
  {
    (void) _other;
    return level_ == _other.level_ &&
      zone_ == _other.zone_;
  }

  bool operator!=(const Heat& _other) const
  {
    return !(*this == _other);
  }

};

class Ventilate
{
private:
 int16_t level_ = 0;
 int32_t zone_ = 0;

public:
  Ventilate() = default;

  explicit Ventilate(
    int16_t level,
    int32_t zone) :
    level_(level),
    zone_(zone) { }

  int16_t level() const { return this->level_; }
  int16_t& level() { return this->level_; }
  void level(int16_t _val_) { this->level_ = _val_; }
  int32_t zone() const { return this->zone_; }
  int32_t& zone() { return this->zone_; }
  void zone(int32_t _val_) { this->zone_ = _val_; }

  bool operator==(const Ventilate& _other) const
  {
    (void) _other;
    return level_ == _other.level_ &&
      zone_ == _other.zone_;
  }

  bool operator!=(const Ventilate& _other) const
  {
    return !(*this == _other);
  }

};

class Occupancy
{
private:
 int16_t level_ = 0;
 int32_t zone_ = 0;

public:
  Occupancy() = default;

  explicit Occupancy(
    int16_t level,
    int32_t zone) :
    level_(level),
    zone_(zone) { }

  int16_t level() const { return this->level_; }
  int16_t& level() { return this->level_; }
  void level(int16_t _val_) { this->level_ = _val_; }
  int32_t zone() const { return this->zone_; }
  int32_t& zone() { return this->zone_; }
  void zone(int32_t _val_) { this->zone_ = _val_; }

  bool operator==(const Occupancy& _other) const
  {
    (void) _other;
    return level_ == _other.level_ &&
      zone_ == _other.zone_;
  }

  bool operator!=(const Occupancy& _other) const
  {
    return !(*this == _other);
  }

};

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::seat_msgs::msg::SeatMotorIdent_T>::getTypeName()
{
  return "seat_msgs::msg::SeatMotorIdent_T";
}

template <> constexpr bool TopicTraits<::seat_msgs::msg::SeatMotorIdent_T>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::SeatMotorIdent_T>::type_map_blob_sz() { return 254; }
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::SeatMotorIdent_T>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::SeatMotorIdent_T>::type_map_blob() {
  static const uint8_t blob[] = {
 0x4b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x02,  0x0c,  0xda,  0x0f,  0xb0,  0x91,  0xf8, 
 0x7e,  0xcf,  0xba,  0x02,  0x26,  0x1d,  0xf2,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0xa8,  0x4e,  0x5f,  0x25,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0x4f,  0xad,  0x7e,  0xf2,  0x00, 
 0x83,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x73,  0xfe,  0xe0,  0x6e,  0x48,  0x3b,  0x0f, 
 0xe0,  0x35,  0xfb,  0x74,  0x80,  0x35,  0x53,  0x00,  0x6b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x29,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x73,  0x65,  0x61,  0x74, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x53,  0x65,  0x61,  0x74, 
 0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x49,  0x64,  0x65,  0x6e,  0x74,  0x5f,  0x54,  0x00,  0x00,  0x00,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x31,  0x00,  0x04,  0x00,  0x05,  0x00,  0x00,  0x00,  0x7a,  0x6f,  0x6e,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x61,  0x78,  0x6c,  0x65,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x73,  0xfe,  0xe0,  0x6e,  0x48,  0x3b,  0x0f,  0xe0,  0x35,  0xfb,  0x74,  0x80,  0x35,  0x53,  0xf1, 
 0x02,  0x0c,  0xda,  0x0f,  0xb0,  0x91,  0xf8,  0x7e,  0xcf,  0xba,  0x02,  0x26,  0x1d,  0xf2, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::SeatMotorIdent_T>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x02,  0x0c,  0xda,  0x0f,  0xb0,  0x91,  0xf8,  0x7e,  0xcf,  0xba,  0x02, 
 0x26,  0x1d,  0xf2,  0x00,  0x37,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x73,  0xfe,  0xe0,  0x6e,  0x48,  0x3b,  0x0f,  0xe0,  0x35,  0xfb,  0x74, 
 0x80,  0x35,  0x53,  0x00,  0x6f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::seat_msgs::msg::Position>::getTypeName()
{
  return "seat_msgs::msg::Position";
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::Position>::type_map_blob_sz() { return 678; }
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::Position>::type_info_blob_sz() { return 196; }
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::Position>::type_map_blob() {
  static const uint8_t blob[] = {
 0xd3,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf1,  0x45,  0x3a,  0xc6,  0x18,  0xee,  0x57,  0x18, 
 0xed,  0xd4,  0x07,  0xbc,  0xb4,  0xa1,  0x65,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0xf1,  0x0a,  0xb3,  0x29,  0xac,  0x31, 
 0x26,  0x1d,  0xc9,  0x46,  0xb3,  0x22,  0x2c,  0x33,  0xd0,  0xb8,  0x0b,  0xb7,  0x74,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x89,  0x91,  0x86,  0xf7,  0xf1, 
 0x0a,  0xb3,  0x29,  0xac,  0x31,  0x26,  0x1d,  0xc9,  0x46,  0xb3,  0x22,  0x2c,  0x33,  0xd0,  0x00,  0x00, 
 0x1d,  0x00,  0x00,  0x00,  0xf1,  0x30,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0xf1,  0x02,  0x0c,  0xda,  0x0f,  0xb0,  0x91,  0xf8,  0x7e,  0xcf,  0xba,  0x02,  0x26,  0x1d, 
 0xf2,  0xf1,  0x02,  0x0c,  0xda,  0x0f,  0xb0,  0x91,  0xf8,  0x7e,  0xcf,  0xba,  0x02,  0x26,  0x1d,  0xf2, 
 0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x31,  0x00,  0x04,  0xa8,  0x4e,  0x5f,  0x25,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x31,  0x00,  0x04,  0x4f,  0xad,  0x7e,  0xf2,  0x00,  0x67,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0xf2,  0x54,  0x8a,  0x80,  0x10,  0x8b,  0xee,  0x93,  0x55,  0xa0,  0x18,  0x7a,  0x31,  0x40,  0x74,  0x00, 
 0x74,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x21,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x73,  0x65,  0x61,  0x74,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d, 
 0x73,  0x67,  0x3a,  0x3a,  0x50,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00, 
 0x44,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x31,  0x00,  0xf2,  0x95,  0x1c,  0x45,  0xad,  0x2e,  0xde,  0x40,  0x5d,  0x7d,  0x56,  0xcd,  0x46,  0x0f, 
 0xb0,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x61,  0x6e,  0x67,  0x6c,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x95,  0x1c,  0x45,  0xad,  0x2e,  0xde,  0x40, 
 0x5d,  0x7d,  0x56,  0xcd,  0x46,  0x0f,  0xb0,  0x00,  0x47,  0x00,  0x00,  0x00,  0xf2,  0x30,  0x00,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x73,  0x65,  0x61,  0x74, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x53,  0x65,  0x61,  0x74, 
 0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x49,  0x64,  0x65,  0x6e,  0x74,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0xf2,  0x73,  0xfe,  0xe0,  0x6e,  0x48,  0x3b,  0x0f,  0xe0,  0x35,  0xfb,  0x74,  0x80,  0x35, 
 0x53,  0x00,  0x00,  0xf2,  0x73,  0xfe,  0xe0,  0x6e,  0x48,  0x3b,  0x0f,  0xe0,  0x35,  0xfb,  0x74,  0x80, 
 0x35,  0x53,  0x00,  0x00,  0x6b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x29,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x73,  0x65,  0x61,  0x74,  0x5f,  0x6d,  0x73,  0x67, 
 0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x53,  0x65,  0x61,  0x74,  0x4d,  0x6f,  0x74,  0x6f, 
 0x72,  0x49,  0x64,  0x65,  0x6e,  0x74,  0x5f,  0x54,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x7a,  0x6f,  0x6e,  0x65,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0x00,  0x05,  0x00,  0x00,  0x00,  0x61,  0x78,  0x6c,  0x65, 
 0x00,  0x00,  0x00,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf2,  0x54,  0x8a,  0x80, 
 0x10,  0x8b,  0xee,  0x93,  0x55,  0xa0,  0x18,  0x7a,  0x31,  0x40,  0x74,  0xf1,  0x45,  0x3a,  0xc6,  0x18, 
 0xee,  0x57,  0x18,  0xed,  0xd4,  0x07,  0xbc,  0xb4,  0xa1,  0x65,  0xf2,  0x95,  0x1c,  0x45,  0xad,  0x2e, 
 0xde,  0x40,  0x5d,  0x7d,  0x56,  0xcd,  0x46,  0x0f,  0xb0,  0xf1,  0x0a,  0xb3,  0x29,  0xac,  0x31,  0x26, 
 0x1d,  0xc9,  0x46,  0xb3,  0x22,  0x2c,  0x33,  0xd0,  0xf2,  0x73,  0xfe,  0xe0,  0x6e,  0x48,  0x3b,  0x0f, 
 0xe0,  0x35,  0xfb,  0x74,  0x80,  0x35,  0x53,  0xf1,  0x02,  0x0c,  0xda,  0x0f,  0xb0,  0x91,  0xf8,  0x7e, 
 0xcf,  0xba,  0x02,  0x26,  0x1d,  0xf2, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::Position>::type_info_blob() {
  static const uint8_t blob[] = {
 0xc0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x45,  0x3a,  0xc6,  0x18,  0xee,  0x57,  0x18,  0xed,  0xd4,  0x07,  0xbc, 
 0xb4,  0xa1,  0x65,  0x00,  0x47,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x0a,  0xb3,  0x29,  0xac,  0x31,  0x26,  0x1d, 
 0xc9,  0x46,  0xb3,  0x22,  0x2c,  0x33,  0xd0,  0x00,  0x21,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x02,  0x0c,  0xda,  0x0f,  0xb0,  0x91,  0xf8,  0x7e,  0xcf,  0xba,  0x02,  0x26,  0x1d,  0xf2,  0x00, 
 0x37,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x54,  0x8a,  0x80,  0x10,  0x8b,  0xee,  0x93,  0x55,  0xa0,  0x18,  0x7a, 
 0x31,  0x40,  0x74,  0x00,  0x78,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x95,  0x1c,  0x45,  0xad,  0x2e,  0xde,  0x40, 
 0x5d,  0x7d,  0x56,  0xcd,  0x46,  0x0f,  0xb0,  0x00,  0x4b,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x73,  0xfe,  0xe0,  0x6e,  0x48,  0x3b,  0x0f,  0xe0,  0x35,  0xfb,  0x74,  0x80,  0x35,  0x53,  0x00, 
 0x6f,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::seat_msgs::msg::Heat>::getTypeName()
{
  return "seat_msgs::msg::Heat";
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::Heat>::type_map_blob_sz() { return 242; }
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::Heat>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::Heat>::type_map_blob() {
  static const uint8_t blob[] = {
 0x4b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x68,  0x2f,  0x87,  0x45,  0x4c,  0xc1,  0x6c, 
 0x30,  0x03,  0x4d,  0xc1,  0x63,  0x8a,  0x90,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0xc9,  0xe9,  0xa8,  0x48,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0xa8,  0x4e,  0x5f,  0x25,  0x00, 
 0x77,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x51,  0xdb,  0x36,  0x5c,  0x4e,  0x98,  0xe2, 
 0xec,  0xf6,  0x4c,  0x49,  0xde,  0x5c,  0x6f,  0x00,  0x5f,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x73,  0x65,  0x61,  0x74, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x48,  0x65,  0x61,  0x74, 
 0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x00,  0x06,  0x00,  0x00,  0x00,  0x6c,  0x65,  0x76,  0x65, 
 0x6c,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x31,  0x00,  0x04,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x7a,  0x6f,  0x6e,  0x65,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x51,  0xdb,  0x36,  0x5c,  0x4e,  0x98,  0xe2,  0xec,  0xf6,  0x4c,  0x49, 
 0xde,  0x5c,  0x6f,  0xf1,  0x68,  0x2f,  0x87,  0x45,  0x4c,  0xc1,  0x6c,  0x30,  0x03,  0x4d,  0xc1,  0x63, 
 0x8a,  0x90, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::Heat>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x68,  0x2f,  0x87,  0x45,  0x4c,  0xc1,  0x6c,  0x30,  0x03,  0x4d,  0xc1, 
 0x63,  0x8a,  0x90,  0x00,  0x37,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x51,  0xdb,  0x36,  0x5c,  0x4e,  0x98,  0xe2,  0xec,  0xf6,  0x4c,  0x49, 
 0xde,  0x5c,  0x6f,  0x00,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::seat_msgs::msg::Ventilate>::getTypeName()
{
  return "seat_msgs::msg::Ventilate";
}

template <> constexpr bool TopicTraits<::seat_msgs::msg::Ventilate>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::Ventilate>::type_map_blob_sz() { return 246; }
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::Ventilate>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::Ventilate>::type_map_blob() {
  static const uint8_t blob[] = {
 0x4b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xc3,  0x2e,  0xe4,  0xe0,  0x8f,  0x69,  0xdf, 
 0x9f,  0x2f,  0x6c,  0xf2,  0x79,  0xc8,  0x80,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0xc9,  0xe9,  0xa8,  0x48,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xa8,  0x4e,  0x5f,  0x25,  0x00, 
 0x7b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xd7,  0x9b,  0x7c,  0x30,  0x34,  0x5a,  0xc4, 
 0xad,  0xd5,  0x60,  0xdb,  0x6f,  0x8e,  0x05,  0x00,  0x63,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x73,  0x65,  0x61,  0x74, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x56,  0x65,  0x6e,  0x74, 
 0x69,  0x6c,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x6c,  0x65,  0x76,  0x65,  0x6c,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x05,  0x00,  0x00,  0x00,  0x7a,  0x6f,  0x6e,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xd7,  0x9b,  0x7c,  0x30,  0x34,  0x5a,  0xc4, 
 0xad,  0xd5,  0x60,  0xdb,  0x6f,  0x8e,  0x05,  0xf1,  0xc3,  0x2e,  0xe4,  0xe0,  0x8f,  0x69,  0xdf,  0x9f, 
 0x2f,  0x6c,  0xf2,  0x79,  0xc8,  0x80, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::Ventilate>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xc3,  0x2e,  0xe4,  0xe0,  0x8f,  0x69,  0xdf,  0x9f,  0x2f,  0x6c,  0xf2, 
 0x79,  0xc8,  0x80,  0x00,  0x37,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xd7,  0x9b,  0x7c,  0x30,  0x34,  0x5a,  0xc4,  0xad,  0xd5,  0x60,  0xdb, 
 0x6f,  0x8e,  0x05,  0x00,  0x67,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

template <> constexpr const char* TopicTraits<::seat_msgs::msg::Occupancy>::getTypeName()
{
  return "seat_msgs::msg::Occupancy";
}

template <> constexpr bool TopicTraits<::seat_msgs::msg::Occupancy>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::Occupancy>::type_map_blob_sz() { return 246; }
template<> constexpr unsigned int TopicTraits<::seat_msgs::msg::Occupancy>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::Occupancy>::type_map_blob() {
  static const uint8_t blob[] = {
 0x4b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xc3,  0x2e,  0xe4,  0xe0,  0x8f,  0x69,  0xdf, 
 0x9f,  0x2f,  0x6c,  0xf2,  0x79,  0xc8,  0x80,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0xc9,  0xe9,  0xa8,  0x48,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xa8,  0x4e,  0x5f,  0x25,  0x00, 
 0x7b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x9e,  0x8f,  0x3e,  0xb9,  0xd9,  0x45,  0x5b, 
 0xf6,  0x23,  0x34,  0xd1,  0x15,  0xc9,  0x96,  0x00,  0x63,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x73,  0x65,  0x61,  0x74, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x4f,  0x63,  0x63,  0x75, 
 0x70,  0x61,  0x6e,  0x63,  0x79,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x6c,  0x65,  0x76,  0x65,  0x6c,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x05,  0x00,  0x00,  0x00,  0x7a,  0x6f,  0x6e,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x9e,  0x8f,  0x3e,  0xb9,  0xd9,  0x45,  0x5b, 
 0xf6,  0x23,  0x34,  0xd1,  0x15,  0xc9,  0x96,  0xf1,  0xc3,  0x2e,  0xe4,  0xe0,  0x8f,  0x69,  0xdf,  0x9f, 
 0x2f,  0x6c,  0xf2,  0x79,  0xc8,  0x80, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::seat_msgs::msg::Occupancy>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xc3,  0x2e,  0xe4,  0xe0,  0x8f,  0x69,  0xdf,  0x9f,  0x2f,  0x6c,  0xf2, 
 0x79,  0xc8,  0x80,  0x00,  0x37,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x9e,  0x8f,  0x3e,  0xb9,  0xd9,  0x45,  0x5b,  0xf6,  0x23,  0x34,  0xd1, 
 0x15,  0xc9,  0x96,  0x00,  0x67,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::seat_msgs::msg::SeatMotorIdent_T>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::seat_msgs::msg::SeatMotorIdent_T>::getTypeName();
    }
};

template <>
struct topic_type_name<::seat_msgs::msg::Position>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::seat_msgs::msg::Position>::getTypeName();
    }
};

template <>
struct topic_type_name<::seat_msgs::msg::Heat>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::seat_msgs::msg::Heat>::getTypeName();
    }
};

template <>
struct topic_type_name<::seat_msgs::msg::Ventilate>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::seat_msgs::msg::Ventilate>::getTypeName();
    }
};

template <>
struct topic_type_name<::seat_msgs::msg::Occupancy>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::seat_msgs::msg::Occupancy>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::seat_msgs::msg::SeatMotorIdent_T)
REGISTER_TOPIC_TYPE(::seat_msgs::msg::Position)
REGISTER_TOPIC_TYPE(::seat_msgs::msg::Heat)
REGISTER_TOPIC_TYPE(::seat_msgs::msg::Ventilate)
REGISTER_TOPIC_TYPE(::seat_msgs::msg::Occupancy)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::seat_msgs::msg::SeatMotorIdent_T>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::seat_msgs::msg::SeatMotorIdent_T& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.axle()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::seat_msgs::msg::SeatMotorIdent_T& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::SeatMotorIdent_T>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::seat_msgs::msg::SeatMotorIdent_T& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.axle()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::seat_msgs::msg::SeatMotorIdent_T& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::SeatMotorIdent_T>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::seat_msgs::msg::SeatMotorIdent_T& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.axle()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::seat_msgs::msg::SeatMotorIdent_T& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::SeatMotorIdent_T>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::seat_msgs::msg::SeatMotorIdent_T& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.axle()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::seat_msgs::msg::SeatMotorIdent_T& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::SeatMotorIdent_T>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write__seat_msgs_msg_SeatMotorIdent(T& streamer, const ::seat_msgs::msg::SeatMotorIdent& instance) {
  (void)instance;
  auto prop = &(get_type_props<::seat_msgs::msg::SeatMotorIdent_T>()[0]);
  prop->is_present = true;
      if (!write(streamer, instance, prop))
        return false;
  return prop->is_present;
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read__seat_msgs_msg_SeatMotorIdent(T& streamer, ::seat_msgs::msg::SeatMotorIdent& instance) {
  (void)instance;
  auto prop = &(get_type_props<::seat_msgs::msg::SeatMotorIdent_T>()[0]);
  prop->is_present = true;
      if (!read(streamer, instance, prop))
        return false;
  return prop->is_present;
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move__seat_msgs_msg_SeatMotorIdent(T& streamer, const ::seat_msgs::msg::SeatMotorIdent& instance) {
  (void)instance;
  auto prop = &(get_type_props<::seat_msgs::msg::SeatMotorIdent_T>()[0]);
  prop->is_present = true;
      if (!move(streamer, instance, prop))
        return false;
  return prop->is_present;
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max__seat_msgs_msg_SeatMotorIdent(T& streamer, const ::seat_msgs::msg::SeatMotorIdent& instance) {
  (void)instance;
  auto prop = &(get_type_props<::seat_msgs::msg::SeatMotorIdent_T>()[0]);
  prop->is_present = true;
      if (!max(streamer, instance, prop))
        return false;
  return prop->is_present;
}

template<>
propvec &get_type_props<::seat_msgs::msg::Position>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::seat_msgs::msg::Position& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write__seat_msgs_msg_SeatMotorIdent(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.angle()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::seat_msgs::msg::Position& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Position>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::seat_msgs::msg::Position& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read__seat_msgs_msg_SeatMotorIdent(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.angle()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::seat_msgs::msg::Position& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Position>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::seat_msgs::msg::Position& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move__seat_msgs_msg_SeatMotorIdent(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.angle()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::seat_msgs::msg::Position& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Position>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::seat_msgs::msg::Position& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max__seat_msgs_msg_SeatMotorIdent(streamer, instance.id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.angle()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::seat_msgs::msg::Position& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Position>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::seat_msgs::msg::Heat>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::seat_msgs::msg::Heat& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::seat_msgs::msg::Heat& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Heat>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::seat_msgs::msg::Heat& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::seat_msgs::msg::Heat& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Heat>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::seat_msgs::msg::Heat& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::seat_msgs::msg::Heat& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Heat>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::seat_msgs::msg::Heat& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::seat_msgs::msg::Heat& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Heat>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::seat_msgs::msg::Ventilate>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::seat_msgs::msg::Ventilate& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::seat_msgs::msg::Ventilate& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Ventilate>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::seat_msgs::msg::Ventilate& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::seat_msgs::msg::Ventilate& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Ventilate>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::seat_msgs::msg::Ventilate& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::seat_msgs::msg::Ventilate& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Ventilate>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::seat_msgs::msg::Ventilate& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::seat_msgs::msg::Ventilate& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Ventilate>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

template<>
propvec &get_type_props<::seat_msgs::msg::Occupancy>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::seat_msgs::msg::Occupancy& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::seat_msgs::msg::Occupancy& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Occupancy>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::seat_msgs::msg::Occupancy& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::seat_msgs::msg::Occupancy& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Occupancy>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::seat_msgs::msg::Occupancy& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::seat_msgs::msg::Occupancy& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Occupancy>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::seat_msgs::msg::Occupancy& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.zone()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::seat_msgs::msg::Occupancy& instance, bool as_key) {
  auto &props = get_type_props<::seat_msgs::msg::Occupancy>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX__HOME_AN_WORKSPACE_DDS_DDS_SAMPLES_DATA_TYPES_CYCLONEDDS_BUILDANDROID_SEAT_MSGS_MSG_SEAT_HPP
