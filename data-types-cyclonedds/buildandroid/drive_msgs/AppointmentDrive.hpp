/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: AppointmentDrive.idl
  Source: AppointmentDrive.hpp
  Cyclone DDS: v0.10.0

*****************************************************************/
#ifndef DDSCXX_APPOINTMENTDRIVE_HPP
#define DDSCXX_APPOINTMENTDRIVE_HPP

#include <cstdint>
#include <string>

namespace drive_msgs
{
namespace srv
{
const std::string TOPIC_SET_APPOINTMENT_DRIVE = "drive_msgs/srv/SetAppointmentDrive";

class AppointmentDrive
{
private:
 int32_t time_ = 0;

public:
  AppointmentDrive() = default;

  explicit AppointmentDrive(
    int32_t time) :
    time_(time) { }

  int32_t time() const { return this->time_; }
  int32_t& time() { return this->time_; }
  void time(int32_t _val_) { this->time_ = _val_; }

  bool operator==(const AppointmentDrive& _other) const
  {
    (void) _other;
    return time_ == _other.time_;
  }

  bool operator!=(const AppointmentDrive& _other) const
  {
    return !(*this == _other);
  }

};

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::drive_msgs::srv::AppointmentDrive>::getTypeName()
{
  return "drive_msgs::srv::AppointmentDrive";
}

template <> constexpr bool TopicTraits<::drive_msgs::srv::AppointmentDrive>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::drive_msgs::srv::AppointmentDrive>::type_map_blob_sz() { return 214; }
template<> constexpr unsigned int TopicTraits<::drive_msgs::srv::AppointmentDrive>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::drive_msgs::srv::AppointmentDrive>::type_map_blob() {
  static const uint8_t blob[] = {
 0x3b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x75,  0x48,  0xf8,  0xce,  0x5b,  0x1b,  0x2b, 
 0x87,  0x3f,  0x0e,  0xdb,  0xdd,  0x8e,  0x4c,  0x00,  0x23,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x07,  0xcc,  0x69,  0x4b,  0x00, 
 0x6b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x15,  0xcf,  0x5e,  0xe2,  0x8e,  0x42,  0xa8, 
 0x6a,  0x0a,  0x93,  0xe3,  0x21,  0x3e,  0x13,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x64,  0x72,  0x69,  0x76, 
 0x65,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x73,  0x72,  0x76,  0x3a,  0x3a,  0x41,  0x70,  0x70, 
 0x6f,  0x69,  0x6e,  0x74,  0x6d,  0x65,  0x6e,  0x74,  0x44,  0x72,  0x69,  0x76,  0x65,  0x00,  0x00,  0x00, 
 0x1b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x05,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x15,  0xcf,  0x5e,  0xe2,  0x8e,  0x42,  0xa8, 
 0x6a,  0x0a,  0x93,  0xe3,  0x21,  0x3e,  0x13,  0xf1,  0x75,  0x48,  0xf8,  0xce,  0x5b,  0x1b,  0x2b,  0x87, 
 0x3f,  0x0e,  0xdb,  0xdd,  0x8e,  0x4c, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::drive_msgs::srv::AppointmentDrive>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x75,  0x48,  0xf8,  0xce,  0x5b,  0x1b,  0x2b,  0x87,  0x3f,  0x0e,  0xdb, 
 0xdd,  0x8e,  0x4c,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x15,  0xcf,  0x5e,  0xe2,  0x8e,  0x42,  0xa8,  0x6a,  0x0a,  0x93,  0xe3, 
 0x21,  0x3e,  0x13,  0x00,  0x57,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::drive_msgs::srv::AppointmentDrive>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::drive_msgs::srv::AppointmentDrive>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::drive_msgs::srv::AppointmentDrive)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::drive_msgs::srv::AppointmentDrive>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::drive_msgs::srv::AppointmentDrive& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.time()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::drive_msgs::srv::AppointmentDrive& instance, bool as_key) {
  auto &props = get_type_props<::drive_msgs::srv::AppointmentDrive>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::drive_msgs::srv::AppointmentDrive& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.time()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::drive_msgs::srv::AppointmentDrive& instance, bool as_key) {
  auto &props = get_type_props<::drive_msgs::srv::AppointmentDrive>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::drive_msgs::srv::AppointmentDrive& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.time()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::drive_msgs::srv::AppointmentDrive& instance, bool as_key) {
  auto &props = get_type_props<::drive_msgs::srv::AppointmentDrive>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::drive_msgs::srv::AppointmentDrive& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.time()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::drive_msgs::srv::AppointmentDrive& instance, bool as_key) {
  auto &props = get_type_props<::drive_msgs::srv::AppointmentDrive>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_APPOINTMENTDRIVE_HPP
