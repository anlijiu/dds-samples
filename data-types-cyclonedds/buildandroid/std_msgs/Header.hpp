/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: Header.idl
  Source: Header.hpp
  Cyclone DDS: v0.10.0

*****************************************************************/
#ifndef DDSCXX_HEADER_HPP
#define DDSCXX_HEADER_HPP

#include "std_msgs/msg/Time.hpp"

#include <string>

namespace std_msgs
{
namespace msg
{
class Header
{
private:
 std::string frame_id_;

public:
  Header() = default;

  explicit Header(
    const std::string& frame_id) :
    frame_id_(frame_id) { }

  const std::string& frame_id() const { return this->frame_id_; }
  std::string& frame_id() { return this->frame_id_; }
  void frame_id(const std::string& _val_) { this->frame_id_ = _val_; }
  void frame_id(std::string&& _val_) { this->frame_id_ = _val_; }

  bool operator==(const Header& _other) const
  {
    (void) _other;
    return frame_id_ == _other.frame_id_;
  }

  bool operator!=(const Header& _other) const
  {
    return !(*this == _other);
  }

};

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::std_msgs::msg::Header>::getTypeName()
{
  return "std_msgs::msg::Header";
}

template <> constexpr bool TopicTraits<::std_msgs::msg::Header>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::std_msgs::msg::Header>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::std_msgs::msg::Header>::type_map_blob_sz() { return 206; }
template<> constexpr unsigned int TopicTraits<::std_msgs::msg::Header>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::std_msgs::msg::Header>::type_map_blob() {
  static const uint8_t blob[] = {
 0x3c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x3a,  0x66,  0x01,  0x23,  0xd6,  0x09,  0x0a, 
 0x69,  0xb2,  0x83,  0x3d,  0xc5,  0xda,  0x9f,  0x00,  0x24,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x4b,  0xb3,  0x9c,  0x5c, 
 0x63,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xf9,  0x96,  0x4a,  0x44,  0xaf,  0x8e,  0x99, 
 0x90,  0x70,  0x9f,  0xbc,  0x63,  0x09,  0x39,  0x00,  0x4b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x73,  0x74,  0x64,  0x5f, 
 0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x48,  0x65,  0x61,  0x64,  0x65, 
 0x72,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x09,  0x00,  0x00,  0x00,  0x66,  0x72,  0x61,  0x6d, 
 0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0xf9,  0x96,  0x4a,  0x44,  0xaf,  0x8e,  0x99,  0x90,  0x70,  0x9f,  0xbc,  0x63,  0x09,  0x39,  0xf1, 
 0x3a,  0x66,  0x01,  0x23,  0xd6,  0x09,  0x0a,  0x69,  0xb2,  0x83,  0x3d,  0xc5,  0xda,  0x9f, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::std_msgs::msg::Header>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x3a,  0x66,  0x01,  0x23,  0xd6,  0x09,  0x0a,  0x69,  0xb2,  0x83,  0x3d, 
 0xc5,  0xda,  0x9f,  0x00,  0x28,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xf9,  0x96,  0x4a,  0x44,  0xaf,  0x8e,  0x99,  0x90,  0x70,  0x9f,  0xbc, 
 0x63,  0x09,  0x39,  0x00,  0x4f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::std_msgs::msg::Header>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::std_msgs::msg::Header>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::std_msgs::msg::Header)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::std_msgs::msg::Header>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::std_msgs::msg::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.frame_id(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::std_msgs::msg::Header& instance, bool as_key) {
  auto &props = get_type_props<::std_msgs::msg::Header>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::std_msgs::msg::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.frame_id(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::std_msgs::msg::Header& instance, bool as_key) {
  auto &props = get_type_props<::std_msgs::msg::Header>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::std_msgs::msg::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.frame_id(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::std_msgs::msg::Header& instance, bool as_key) {
  auto &props = get_type_props<::std_msgs::msg::Header>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::std_msgs::msg::Header& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.frame_id(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::std_msgs::msg::Header& instance, bool as_key) {
  auto &props = get_type_props<::std_msgs::msg::Header>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_HEADER_HPP
