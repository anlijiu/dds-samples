/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: Response.idl
  Source: /home/an/workspace/dds/dds-samples/data-types-cyclonedds/buildandroid/std_msgs/srv/Response.cpp
  Cyclone DDS: v0.10.0

*****************************************************************/
#include "/home/an/workspace/dds/dds-samples/data-types-cyclonedds/buildandroid/std_msgs/srv/Response.hpp"

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
::std_msgs::srv::ResponseStatus enum_conversion<::std_msgs::srv::ResponseStatus>(uint32_t in) {
  switch (in) {
    default:
    case 0:
    return ::std_msgs::srv::ResponseStatus::REPLY_IN_PROGRESS;
    break;
    case 1:
    return ::std_msgs::srv::ResponseStatus::REPLY_COMPLETED;
    break;
    case 2:
    return ::std_msgs::srv::ResponseStatus::REPLY_ERROR;
    break;
  }
}

template<>
propvec &get_type_props<::std_msgs::srv::Response>() {
  static thread_local std::mutex mtx;
  static thread_local propvec props;
  static thread_local entity_properties_t *props_end = nullptr;
  static thread_local std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed)) {
    auto ptr = props.data();
    while (ptr < props_end)
      (ptr++)->is_present = false;
    return props;
  }
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed)) {
    auto ptr = props.data();
    while (ptr < props_end)
      (ptr++)->is_present = false;
    return props;
  }
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bb_unset, extensibility::ext_final, false));  //::error
  props.push_back(entity_properties_t(1, 1, false, get_bit_bound<::std_msgs::srv::ResponseStatus>(), extensibility::ext_final, false));  //::status

  entity_properties_t::finish(props, keylist);
  props_end = props.data() + props.size();
  initialized.store(true, std::memory_order_release);
  return props;
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

