/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: Hvac.idl
  Source: /home/an/workspace/dds/dds-samples/data-types-cyclonedds/buildandroid/hvac_msgs/msg/Hvac.hpp
  Cyclone DDS: v0.10.0

*****************************************************************/
#ifndef DDSCXX__HOME_AN_WORKSPACE_DDS_DDS_SAMPLES_DATA_TYPES_CYCLONEDDS_BUILDANDROID_HVAC_MSGS_MSG_HVAC_HPP
#define DDSCXX__HOME_AN_WORKSPACE_DDS_DDS_SAMPLES_DATA_TYPES_CYCLONEDDS_BUILDANDROID_HVAC_MSGS_MSG_HVAC_HPP

#include <cstdint>
#include <string>

namespace hvac_msgs
{
namespace msg
{
const std::string TOPIC_ENV_OUT_TEMPERATURE = "hvac_msgs/msg/EnvOutTemperature";

const std::string TOPIC_HVAC_CURRENT_TEMPERATURE = "hvac_msgs/msg/CurrentTemperature";

const std::string TOPIC_STEERING_WHEEL_HEAT = "hvac_msgs/msg/STEERING_WHEEL_HEAT";

class SteeringWheelHeat
{
private:
 int16_t level_ = 0;

public:
  SteeringWheelHeat() = default;

  explicit SteeringWheelHeat(
    int16_t level) :
    level_(level) { }

  int16_t level() const { return this->level_; }
  int16_t& level() { return this->level_; }
  void level(int16_t _val_) { this->level_ = _val_; }

  bool operator==(const SteeringWheelHeat& _other) const
  {
    (void) _other;
    return level_ == _other.level_;
  }

  bool operator!=(const SteeringWheelHeat& _other) const
  {
    return !(*this == _other);
  }

};

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::hvac_msgs::msg::SteeringWheelHeat>::getTypeName()
{
  return "hvac_msgs::msg::SteeringWheelHeat";
}

template <> constexpr bool TopicTraits<::hvac_msgs::msg::SteeringWheelHeat>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::hvac_msgs::msg::SteeringWheelHeat>::type_map_blob_sz() { return 214; }
template<> constexpr unsigned int TopicTraits<::hvac_msgs::msg::SteeringWheelHeat>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::hvac_msgs::msg::SteeringWheelHeat>::type_map_blob() {
  static const uint8_t blob[] = {
 0x3b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x71,  0x56,  0x5e,  0x18,  0x4d,  0xba,  0x36, 
 0xbd,  0xab,  0x70,  0xe2,  0xd6,  0xf6,  0x10,  0x00,  0x23,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0xc9,  0xe9,  0xa8,  0x48,  0x00, 
 0x6c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x5c,  0x8c,  0x6a,  0xce,  0xc9,  0xc6,  0x71, 
 0x5b,  0xd0,  0x9d,  0xae,  0x9e,  0xf1,  0x09,  0x00,  0x54,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x68,  0x76,  0x61,  0x63, 
 0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x53,  0x74,  0x65,  0x65, 
 0x72,  0x69,  0x6e,  0x67,  0x57,  0x68,  0x65,  0x65,  0x6c,  0x48,  0x65,  0x61,  0x74,  0x00,  0x00,  0x00, 
 0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x03,  0x00,  0x06,  0x00,  0x00,  0x00,  0x6c,  0x65,  0x76,  0x65,  0x6c,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x5c,  0x8c,  0x6a,  0xce,  0xc9,  0xc6,  0x71, 
 0x5b,  0xd0,  0x9d,  0xae,  0x9e,  0xf1,  0x09,  0xf1,  0x71,  0x56,  0x5e,  0x18,  0x4d,  0xba,  0x36,  0xbd, 
 0xab,  0x70,  0xe2,  0xd6,  0xf6,  0x10, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::hvac_msgs::msg::SteeringWheelHeat>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x71,  0x56,  0x5e,  0x18,  0x4d,  0xba,  0x36,  0xbd,  0xab,  0x70,  0xe2, 
 0xd6,  0xf6,  0x10,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x5c,  0x8c,  0x6a,  0xce,  0xc9,  0xc6,  0x71,  0x5b,  0xd0,  0x9d,  0xae, 
 0x9e,  0xf1,  0x09,  0x00,  0x58,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::hvac_msgs::msg::SteeringWheelHeat>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::hvac_msgs::msg::SteeringWheelHeat>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::hvac_msgs::msg::SteeringWheelHeat)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::hvac_msgs::msg::SteeringWheelHeat>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::hvac_msgs::msg::SteeringWheelHeat& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::hvac_msgs::msg::SteeringWheelHeat& instance, bool as_key) {
  auto &props = get_type_props<::hvac_msgs::msg::SteeringWheelHeat>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::hvac_msgs::msg::SteeringWheelHeat& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::hvac_msgs::msg::SteeringWheelHeat& instance, bool as_key) {
  auto &props = get_type_props<::hvac_msgs::msg::SteeringWheelHeat>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::hvac_msgs::msg::SteeringWheelHeat& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::hvac_msgs::msg::SteeringWheelHeat& instance, bool as_key) {
  auto &props = get_type_props<::hvac_msgs::msg::SteeringWheelHeat>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::hvac_msgs::msg::SteeringWheelHeat& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.level()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::hvac_msgs::msg::SteeringWheelHeat& instance, bool as_key) {
  auto &props = get_type_props<::hvac_msgs::msg::SteeringWheelHeat>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX__HOME_AN_WORKSPACE_DDS_DDS_SAMPLES_DATA_TYPES_CYCLONEDDS_BUILDANDROID_HVAC_MSGS_MSG_HVAC_HPP
